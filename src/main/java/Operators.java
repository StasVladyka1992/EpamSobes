public class Operators {
    public static void main(String[] args) {
        // существуют
        // - арифметические операторы
        // - битовые
        // - операторы отношения (>,< ==,!=, >=, <=)
        // - логические операторы (выполняются только над boolean и Boolean)

        // АРИФМЕТИЧЕСКИЕ (+, +=, -, -=, *, *=, /, /=, %, %=, ++,--)
            //        boolean a = true, b=false;
            //        boolean c = a + b; ошибка компиляции
        int i1 = 2, i2 =5;
        int i3 = i2%i1;
        System.out.println(i3);

        // БИТОВЫЕ (|, |=,>>, >>=, >>>, >>>=, <<, <<=, & , &= ,^,  ^=, ~)

        // или |
        int i4 = 0b1101, i5 = 0b1000; //
        int i6 = i4|i5; // 1+1=1 1+0=1 0+0=0 1+0=1 => 1101

        // исключающее или ^
        i6 = i4^i5; // 1+1=0 1+0=1 0+0=0 1+0=1 => 0101

        // и &
        i6 = i4&i5; // 1+1=1 1+0=0 0+0=0 1+0=0 => 1000

        //~отрицание
        // Все целочисленные типа, за исключением char - типы со знаком,
        // т.е. могут быть положительными или отрицательными.
        //
        // лучшее объяснение что такое дополнительный код.
        // побитовое ~ любого числа вернет -(х+1)
        System.out.println("Число" + ~1);
        //В java отрицательные числа хранятся с помощью доп. кода.

        System.out.println(Integer.toBinaryString(-2));


        i6 = ~i4; // 0010+0 (0 будет считаться единицей в таком случае, т.к. числа отриц.) = 0001

        //сдвиг влево c сохранением знака, сдвиг вправо с сохран. знака << >>
        // при таких сдвигах старший бит автоматически заполнялся его предыдущим содержимым
        i6 = i4<<2; // 1101 <<2 => 110100
        i6 = i4>>2; // 1101 >>2 => 0011

        // сдвиг только >>>/=>>>вправо беззнаковый. т.е. старший бит будет всегда заполняться нулями, а не предыдущим значением.
        // Поэтому при беззнаковых сдвигах отрицательных значение мы получаем такие большие числа.
        //
        i6 = -i4>>>2; // 1111 1111 1111 1111 1111 1111 1111 0010 (-13) => 0011 1111 1111 1111 1111 1111 1111 1100
        System.out.println(i6);

        // ЛОГИЧЕСКИЕ (работают только с true/false)

        // || или - хотя бы одно из

        // && и - все должно быть или true или false

        // instanceof - возвращает true, если объект является текущим классом или его наследником.
        Integer i = 7;
        if (i instanceof Number){
            System.out.println("Я наследник Number");
        }
        else System.out.println("Я из другого рода");

        // ! унарное отрицание
        if (true == !false){
            System.out.println("Привет из управляющей конструкции if");
        }

        // тернарный оператор "?:"
        int i7 = 7,i8=6;
        if (i7==i8? true:false ){
            System.out.println("i7 равно i8");
        }
        else System.out.println("i7 != i8");

        System.out.println(~-12);
    }
}
