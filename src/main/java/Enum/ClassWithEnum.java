package Enum;

public class ClassWithEnum {
    public static void main(String[] args) {

        //обращение к элементу enum
        EnumType e = EnumType.Friday;
        System.out.println(e);

        //получение массива со всеми эл-ми Enum
        EnumType [] ar = EnumType.values();
        for (int i = 0; i <ar.length ; i++) {
            System.out.println(ar[i]);
        }

        // вытащить элемент класса EnumType по значению, которое равно "Friday"
        EnumType e2 = EnumType.valueOf("Friday");

        // сравнение элементов происходит исходя из их порядкового номера. Метод compareTo определен в классе Enum
        System.out.println(e.compareTo(e2));



        //1) Тип перечисления не имеет экземпляров, отличных от тех, которые определены его константами перечисления.
        //2) Ошибка компиляции, чтобы попытаться явно создать экземпляр типа перечисления.
//        EnumType e = new EnumType();
        //3) Метод final clone в enum гарантирует, что константы enum никогда не могут быть клонированы,
        // а специальное обращение с помощью механизма сериализации гарантирует, что дублирующие экземпляры никогда
        // не создаются в результате десериализации. Отражающее создание типов перечислений запрещено.
        //4) Допустимо сравнивать объекты enum по ссылке

        // Вместе эти четыре вещи гарантируют, что экземпляры типа enum не существуют, кроме тех, которые определены константами enum.
        //Поскольку для каждой константы enum существует только один экземпляр, допустимо использовать
        // оператор == вместо метода equals при сравнении двух ссылок на объекты, если известно, что хотя бы один
        // из них относится к константе enum. (Метод equals в enum - это метод final, который просто вызывает super.equals
        // в своем аргументе и возвращает результат, таким образом выполняя сравнение идентичности.)
    }
}
