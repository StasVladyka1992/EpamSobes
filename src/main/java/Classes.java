public class Classes extends Parent {
    char c;

    public static void main(String[] args) {
        // МОДИФИКАТОРЫ ДОСТУПА:

        // public - класс/метод/конструктор/переменная доступен из любых пакетов и классов
        // protected - метод/конструктор/переменная доступен из своего пакета и наследников
        // default - класс/метод/конструктор/переменная доступен только из своего пакета
        // private - метод/конструктор/переменная доступен только методам из своего класса.

        // если класс объявлен без модификатора доступа, а одно из его полей, например, public, то обратиться к нему
        // не получится, т.к. для обращения к полю класса, идет обращение к классу.

        // КОНСТРУКТОРЫ:
        // в любой конструктор неявно передается ссылка super на конструктор класса-родителя. Она идет первой. Можно
        // указать ее и явно. Кроме того каждый объект имеет неявную ссылку на себя, которая передается неявно
        // нестатическим методам. При наследовании класс-родитель обязан иметь конструктор по умолчанию! Это необходимо,
        // например, чтобы была возможность создавать объекты класса-наследника без каких-либо параметров. Конструктор
        // вызывается при использовании ключевого слова new.

    }

    public Classes(int i, float f, String s, char c) {
        super(i, f, s);
        this.c = c;
    }

    public Classes() {
    }

        //МЕТОДЫ
        // P.S. статический метод можно вызвать и из объекта, но это не совсем правильно и красиво. Пример:
        // Classes classes = new Classes();
        // classes.m1();
        //Переопределение статических методов невозможно, так как обращение
        //к статическому атрибуту или методу осуществляется посредством задания
        //имени класса, которому они принадлежат.

    static void m1 (){
        return;
    }

}
